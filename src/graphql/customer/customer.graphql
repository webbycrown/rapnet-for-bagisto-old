# Customer\Customer Related APIs
extend type Query @guard(with: ["admin-api"]) {
    customers(input: FilterCustomerInput @builder(method: "Webkul\\GraphQLAPI\\Queries\\Customer\\FilterCustomer")): [Customer!] @paginate(type: "PAGINATOR" defaultCount:10 model: "Webkul\\Customer\\Models\\Customer")

    customer(id: ID @eq): Customer @find(model: "Webkul\\Customer\\Models\\Customer")
}

extend type Mutation @guard {
    createCustomer(
        input: CreateCustomerInput!
    ): Customer  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Customer\\CustomerMutation@store")

    updateCustomer(
        id: ID!,
        input: CreateCustomerInput!
    ): Customer  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Customer\\CustomerMutation@update")
    
    deleteCustomer(id: ID!): Customer  @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Customer\\CustomerMutation@delete")
}

input CreateCustomerInput {
    firstName: String! @rename(attribute: "first_name")
    lastName: String! @rename(attribute: "last_name")
    gender: String!
    email: String!
    dateOfBirth: String @rename(attribute: "date_of_birth")
    customerGroupId: Int! @rename(attribute: "customer_group_id")
    phone: String
    notes: String
    status: Boolean
}

input FilterCustomerInput {
    id: Int
    name: String
    gender: String
    email: String
    dateOfBirth: String @rename(attribute: "date_of_birth")
    groupName: String @rename(attribute: "group_name")
    phone: String
    status: Boolean
}

type Customer {
    id: ID!
    firstName: String! @rename(attribute: "first_name")
    lastName: String! @rename(attribute: "last_name")
    name: String
    gender: String
    dateOfBirth: String @rename(attribute: "date_of_birth")
    email: String!
    phone: String
    notes: String
    image: String
    imageUrl: String @rename(attribute: "image_url")
    password: String!
    apiToken: String @rename(attribute: "api_token")
    customerGroupId: Int @rename(attribute: "customer_group_id")
    subscribedToNewsLetter: Boolean @rename(attribute: "subscribed_to_news_letter")
    isVerified: Boolean @rename(attribute: "is_verified")
    isSuspended: Boolean @rename(attribute: "is_suspended")
    token: String
    notes: String
    status: Boolean
    customerGroup: CustomerGroup @belongsTo(relation: "group")
    addresses: [CustomerAddress] @hasMany
    defaultAddress: CustomerAddress @hasOne(relation: "default_address")
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    success: String
}